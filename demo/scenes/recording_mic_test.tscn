[gd_scene load_steps=5 format=3 uid="uid://be1sf32im4oyf"]

[ext_resource type="Theme" uid="uid://3q7c2jbud5kx" path="res://new_theme.tres" id="2_epbhe"]

[sub_resource type="GDScript" id="GDScript_jk3fe"]
script/source = "extends Control



@onready var _audio_stream_player : AudioStreamPlayer = $AudioStreamPlayer
var _audio_effect_record : AudioEffectRecord
var _audio_sample : AudioStreamWAV
var _microphone_input_peak_volume : Vector2
var _is_recording : bool = false

@onready var peak_volume_label : Label = $MarginContainer/VBoxContainer/PeakVolume
@onready var record_button : Button = $MarginContainer/VBoxContainer/HBoxContainer/Record

func _ready():
	_audio_effect_record = AudioServer.get_bus_effect(AudioServer.get_bus_index(\"Record\"), 0)
	record_button.pressed.connect(_on_record_button)
	
	var devices = AudioServer.get_input_device_list()
	AudioServer.input_device = devices[devices.size() - 1]
	
func _get_left_and_right_input_peak():
	_microphone_input_peak_volume.x = AudioServer.get_bus_peak_volume_left_db(AudioServer.get_bus_index(\"Record\"), 0)
	_microphone_input_peak_volume.y = AudioServer.get_bus_peak_volume_right_db(AudioServer.get_bus_index(\"Record\"), 0)


func _process(_delta: float):
	_get_left_and_right_input_peak()
	peak_volume_label.text = \"Peak volume: %s | %s db\" % [str(int(_microphone_input_peak_volume.x)), str(int(_microphone_input_peak_volume.y))]
	
	if _is_recording:
		if not _audio_effect_record.is_recording_active():
			_audio_effect_record.format = AudioStreamWAV.FORMAT_16_BITS
			_audio_effect_record.set_recording_active(true)
	else:
		if _audio_effect_record.is_recording_active():
			_audio_effect_record.set_recording_active(false)
		
		_audio_sample = _audio_effect_record.get_recording()
		if _audio_sample:
			_audio_sample.set_mix_rate(16000)
			for d in _audio_sample.data:
				if d != 0: print(\"nie puste\")
			
			print(_audio_sample)
			print(_audio_sample.format)
			print(_audio_sample.mix_rate)
			print(_audio_sample.stereo)
			print(_audio_sample.data.size())
			
			_audio_sample.data = _stereo_to_mono(_audio_sample.data)
			if not _audio_stream_player.playing:
				_audio_stream_player.stream = _audio_sample
				_audio_stream_player.play()
				_audio_sample.save_to_wav(\"text.wav\")
		
	
func _on_record_button():
	if _is_recording:
		_is_recording = false
		record_button.text = \"Start recording\"
	else:
		_is_recording = true
		record_button.text = \"Stop recording\"

func _stereo_to_mono(input):
	if input.size() % 4 == 0:
		var output : PackedByteArray = PackedByteArray()
		var output_index = 0
		for x in range(0, input.size() / 2): output.append(0)
		
		for n in range(0, input.size()):
			if n % 4 == 0:
				var p_array : PackedByteArray = PackedByteArray()
				p_array.append(input[n])
				p_array.append(input[n+2])
				
				p_array.encode_s16(0, input[n])
				p_array.encode_s16(1, input[n+2])
				# var left_channel = input[n]
				# var right_channel = input[n+2]
				# var mixed = (left_channel + right_channel) / 2
				var mixed = (p_array[0] + p_array[1]) / 2
				var output_sample = var_to_bytes(mixed)
				
				if output_index < output.size():
					output[output_index] = output_sample[0]
					output_index += 1
				if output_index < input.size():
					output[output_index] = output_sample[1]
					output_index += 1
		
		return output
	return []
"

[sub_resource type="AudioStreamMicrophone" id="AudioStreamMicrophone_rh82h"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_pymdu"]
bg_color = Color(0.194605, 0.000411271, 6.01634e-09, 1)

[node name="RecordingMicTest" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_jk3fe")

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]

[node name="AudioStreamRecorder" type="AudioStreamPlayer" parent="."]
stream = SubResource("AudioStreamMicrophone_rh82h")
autoplay = true

[node name="Panel" type="Panel" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme = ExtResource("2_epbhe")
theme_override_styles/panel = SubResource("StyleBoxFlat_pymdu")

[node name="MarginContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 100
theme_override_constants/margin_top = 100
theme_override_constants/margin_right = 100
theme_override_constants/margin_bottom = 100

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer"]
layout_mode = 2

[node name="Title" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
theme = ExtResource("2_epbhe")
text = "Voice Recorder"

[node name="Description" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
theme = ExtResource("2_epbhe")
text = "Use this to test, if microphone works."

[node name="Separator" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
theme = ExtResource("2_epbhe")

[node name="PeakVolume" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
theme = ExtResource("2_epbhe")
text = "Peak volume: 0 | 0 db"

[node name="Separator2" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
theme = ExtResource("2_epbhe")

[node name="Separator3" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
theme = ExtResource("2_epbhe")

[node name="HBoxContainer" type="HBoxContainer" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 50
alignment = 1

[node name="Record" type="Button" parent="MarginContainer/VBoxContainer/HBoxContainer"]
layout_mode = 2
theme = ExtResource("2_epbhe")
text = "START RECORDING"
